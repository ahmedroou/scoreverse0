// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting a point handicapping system for players in a game.
 *
 * - suggestHandicap - A function that suggests a handicap based on player statistics.
 * - SuggestHandicapInput - The input type for the suggestHandicap function.
 * - SuggestHandicapOutput - The output type for the suggestHandicap function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestHandicapInputSchema = z.object({
  playerStats: z.array(
    z.object({
      playerName: z.string().describe('The name of the player.'),
      winRate: z
        .number()
        .min(0)
        .max(1)
        .describe('The win rate of the player (0 to 1).'),
      averageScore: z.number().describe('The average score of the player.'),
    })
  ).describe('An array of player statistics, including name, win rate, and average score.'),
  gameName: z.string().describe('The name of the game being played.'),
});

export type SuggestHandicapInput = z.infer<typeof SuggestHandicapInputSchema>;

const SuggestHandicapOutputSchema = z.array(
  z.object({
    playerName: z.string().describe('The name of the player.'),
    handicap: z
      .number()
      .optional()
      .describe('The suggested handicap for the player, positive or negative. Not included if no handicap is suggested.'),
    reason: z
      .string()
      .optional()
      .describe('The reason for the handicap suggestion. Not included if no handicap is suggested.'),
  })
).describe('An array of handicap suggestions for each player.');

export type SuggestHandicapOutput = z.infer<typeof SuggestHandicapOutputSchema>;

export async function suggestHandicap(input: SuggestHandicapInput): Promise<SuggestHandicapOutput> {
  return suggestHandicapFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestHandicapPrompt',
  input: {schema: SuggestHandicapInputSchema},
  output: {schema: SuggestHandicapOutputSchema},
  prompt: `You are an expert game handicapper. Given the following player statistics for the game "{{{gameName}}}", suggest a point handicapping system for each player to make the game more fair and exciting. Only suggest a handicap if a player's abilities are noticeably skewed relative to the other players.

Player Statistics:
{{#each playerStats}}
- Player Name: {{{playerName}}}, Win Rate: {{{winRate}}}, Average Score: {{{averageScore}}}
{{/each}}

Output your suggestions as a JSON array. For each player, include the 'playerName' and a 'handicap' field representing the suggested handicap (positive or negative). Also include a short 'reason' for the suggestion. If no handicap is necessary for a player, do not include the 'handicap' or 'reason' fields for that player.

Ensure that the output is valid JSON.
`,
});

const suggestHandicapFlow = ai.defineFlow(
  {
    name: 'suggestHandicapFlow',
    inputSchema: SuggestHandicapInputSchema,
    outputSchema: SuggestHandicapOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
