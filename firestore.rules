rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      // For this rule to work, users must have an 'isAdmin' field in their document.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- Broad Admin Access ---
    // Admins can read and write all data. This is why joining works for admins.
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- Public & Invite Rules ---
    match /public_shares/{shareId} {
      allow read: if true;
      allow write: if isUser(shareId);
    }
    match /spaceInvites/{inviteCode} {
      // Any signed-in user can read an invite code to check its validity.
      allow read: if isSignedIn();
      // Only the owner of the space can create/update their invite code.
      allow write: if isUser(get(/databases/$(database)/documents/spaceInvites/$(inviteCode)).data.ownerId);
    }

    // --- User-Specific Rules ---
    match /users/{userId} {
      // Users can read and create their own profile.
      allow read, create: if isUser(userId);
      // Users can update their own profile, but cannot make themselves an admin.
      allow update: if isUser(userId) && request.resource.data.isAdmin == resource.data.isAdmin;

      // --- Subcollection Rules (Owned Data) ---
      // Users can manage their own players, games, matches, tournaments, and spaces.
      match /players/{docId}     { allow read, write: if isUser(userId); }
      match /games/{docId}       { allow read, write: if isUser(userId); }
      match /matches/{docId}     { allow read, write: if isUser(userId); }
      match /tournaments/{docId} { allow read, write: if isUser(userId); }
      
      match /spaces/{spaceId} {
        // Owner has full control.
        allow read, write: if isUser(userId);

        // A non-owner can update a space document ONLY to join it as a viewer.
        // This is the corrected rule that fixes the bug for regular users.
        allow update: if !isUser(userId) && isSignedIn() &&
                       // This must be the only field being changed.
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       // Ensure the new 'members' map is exactly the old map plus the new user as a 'viewer'.
                       // This is a secure way to prevent users from changing other members' roles or adding other users.
                       // It also handles cases where the 'members' map doesn't exist on old documents.
                       request.resource.data.members == get(resource.data, 'members', {}).extend({[request.auth.uid]: 'viewer'});
      }
    }
    
    // --- Shared Data Access Rules ---
    // These rules grant members of a space access to the owner's data.
    function isMemberOfSpace(ownerId, spaceId) {
      if (!isSignedIn()) { return false; }
      let spaceDoc = get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId));
      return spaceDoc.data.members[request.auth.uid] != null;
    }

    function canEditSpace(ownerId, spaceId) {
       if (!isSignedIn()) { return false; }
       let space = get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data;
       let userRole = space.members[request.auth.uid];
       return isUser(ownerId) || (userRole in ['editor']);
    }

    // Allow members to read the owner's players and games lists
    function isMemberOfAnyOfOwnersSpaces(ownerId) {
        return isSignedIn() && ownerId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.sharedSpaces.values();
    }
    match /users/{ownerId}/players/{docId} { allow read: if isUser(ownerId) == false && isMemberOfAnyOfOwnersSpaces(ownerId); }
    match /users/{ownerId}/games/{docId}   { allow read: if isUser(ownerId) == false && isMemberOfAnyOfOwnersSpaces(ownerId); }
    
    // Allow members to read the space document itself
    match /users/{ownerId}/spaces/{spaceId} {
      allow read: if isUser(ownerId) == false && isMemberOfSpace(ownerId, spaceId);
    }
    
    // Allow members to read/write matches and tournaments within the space
    match /users/{ownerId}/{collection}/{docId} {
       allow read: if isUser(ownerId) == false && collection in ['matches', 'tournaments'] && resource.data.spaceId != null && isMemberOfSpace(ownerId, resource.data.spaceId);
       allow write: if isUser(ownerId) == false && collection in ['matches', 'tournaments'] && resource.data.spaceId != null && canEditSpace(ownerId, resource.data.spaceId);
    }
  }
}
