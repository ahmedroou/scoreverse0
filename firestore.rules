
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    //      HELPER FUNCTIONS
    // =================================
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isAuth() && 'isAdmin' in userDoc.data && userDoc.data.isAdmin == true;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Checks if the requesting user is a member of any space owned by the target {ownerId}.
    // This grants read access to the owner's global collections like players and games.
    function isMemberOfAnyOfOwnersSpaces(ownerId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isAuth() && 'sharedSpaces' in userDoc.data && ownerId in userDoc.data.sharedSpaces.values();
    }
    
    // Checks if the requesting user has a specific role (or higher) in a specific space.
    function hasRoleInSpace(ownerId, spaceId, role) {
      if (!isAuth() || spaceId == null) { return false; }
      let spaceDoc = get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId));
      if (!spaceDoc.exists || !('members' in spaceDoc.data) || !(request.auth.uid in spaceDoc.data.members)) {
        return false;
      }
      let memberRole = spaceDoc.data.members[request.auth.uid];
      if (role == 'owner') { return memberRole == 'owner'; }
      if (role == 'editor') { return memberRole == 'owner' || memberRole == 'editor'; }
      if (role == 'viewer') { return memberRole == 'owner' || memberRole == 'editor' || memberRole == 'viewer'; }
      return false;
    }

    // =================================
    //      DATABASE-WIDE RULES
    // =================================

    // --- DEFAULT RULE ---
    // Deny all reads and writes by default for security.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- USERS collection ---
    match /users/{userId} {
      // READ: A user can read their own profile, or an admin can read any profile.
      allow read: if isOwner(userId) || isAdmin();
      
      // WRITE: A user can update their own document.
      // An owner removing a member from a space is also allowed to update the member's 'sharedSpaces' map.
      // This is required for the app's 'remove member' feature to work correctly.
      function isOwnerRemovingFromSpace() {
          // This rule is broad to support the current app logic. It finds the space being removed...
          let removedSpaceId = resource.data.sharedSpaces.keys().removeAll(request.resource.data.sharedSpaces.keys()).get(0, null);
          if (removedSpaceId == null) { return false; }
          // ...and checks if the person making the request owns that space.
          // Note: This assumes the value in the sharedSpaces map is the ownerId, which might not be robust.
          // A safer check would be against the space document itself.
          let spaceDoc = get(/databases/$(database)/documents/users/$(resource.data.sharedSpaces[removedSpaceId])/spaces/$(removedSpaceId));
          return spaceDoc.data.ownerId == request.auth.uid;
      }

      allow write: if isOwner(userId) || (isAuth() && isOwnerRemovingFromSpace());
    }

    // --- USER SUBCOLLECTIONS ---
    
    // Player and Game data is global to a user
    match /users/{ownerId}/(players|games)/{docId} {
      allow read: if isOwner(ownerId) || isAdmin() || isMemberOfAnyOfOwnersSpaces(ownerId);
      allow write: if isOwner(ownerId) || isAdmin();
    }
    
    // Space data
    match /users/{ownerId}/spaces/{spaceId} {
      allow read: if isOwner(ownerId) || isAdmin() || hasRoleInSpace(ownerId, spaceId, 'viewer');
      
      // An owner can update their space (e.g., change name, manage members).
      // Also, any authenticated user can join a space by adding themselves as a 'viewer'.
      function isJoining() {
        return request.resource.data.members.size() == resource.data.members.size() + 1 &&
               request.resource.data.members[request.auth.uid] == 'viewer';
      }
      
      allow write: if isOwner(ownerId) || isAdmin() || (isAuth() && isJoining());
    }

    // Match and Tournament data is scoped to a space
    match /users/{ownerId}/(matches|tournaments)/{docId} {
      // READ: Allow if owner, admin, or any member of the space.
      allow read: if isOwner(ownerId) || isAdmin() || hasRoleInSpace(ownerId, resource.data.spaceId, 'viewer');
      // WRITE: Allow if owner, admin, or an editor of the space.
      allow create: if isOwner(ownerId) || isAdmin() || hasRoleInSpace(ownerId, request.resource.data.spaceId, 'editor');
      allow update, delete: if isOwner(ownerId) || isAdmin() || hasRoleInSpace(ownerId, resource.data.spaceId, 'editor');
    }

    // --- INVITES collection ---
    match /spaceInvites/{inviteCode} {
      allow read: if isAuth();
      // Only the owner of the space can create/update the invite code.
      allow write: if isAuth() && isOwner(request.resource.data.ownerId);
    }
  }
}
