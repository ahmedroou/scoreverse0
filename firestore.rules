
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =======================================
    // Helper Functions
    // =======================================
    function isLoggedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }

    // Securely checks if the requesting user is an admin.
    function isAdmin() {
      return isLoggedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Checks if the requesting user is a member of a specific space.
    function isMemberOf(ownerId, spaceId) {
      return isLoggedIn() &&
             exists(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)) &&
             request.auth.uid in get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members;
    }

    // Gets the role of the requesting user in a specific space.
    function getRoleIn(ownerId, spaceId) {
        return get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members[request.auth.uid];
    }
    
    // =======================================
    // User Collection Rules
    // =======================================
    match /users/{userId} {
      // Admins can read any user profile. A user can read their own.
      allow get: if isOwner(userId) || isAdmin();
      
      // Admins can list all users. This fixes the main issue.
      allow list: if isAdmin();

      // Users can only update their own profile.
      // Prevent users from making themselves an admin.
      allow update: if isOwner(userId) && (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == resource.data.isAdmin);

      // No one can create or delete user docs directly through the client.
      allow create, delete: if false;
    }
    
    // =======================================
    // User Sub-collection Rules
    // =======================================

    // Rules for Space documents themselves.
    // This applies to both the original doc under the owner and the "link" doc under members.
    match /users/{userId}/spaces/{spaceId} {
        // A user can read any space doc they own or are a member of.
        // isOwner check for spaces created by the user.
        // isMemberOf check for spaces they've been invited to.
        allow get: if isOwner(userId) || isMemberOf(resource.data.ownerId, spaceId);

        // Users can list their own spaces (originals and links).
        allow list: if isOwner(userId);
        
        // Owner of the original space can update it, which propagates to members via backend logic.
        // The rule here is for direct updates.
        allow update: if isOwner(resource.data.ownerId) || getRoleIn(resource.data.ownerId, spaceId) == 'editor';
        
        // A user can create a space in their own subcollection.
        allow create: if isOwner(userId) && request.resource.data.ownerId == userId;

        // The original owner can delete the space. A member can delete their "link" doc to leave.
        allow delete: if isOwner(resource.data.ownerId) || isOwner(userId);
    }
    
    // Collections within a space context (matches, tournaments)
    match /users/{ownerId}/matches/{matchId} {
      // Owner has full access.
      allow read, write: if isOwner(ownerId);
      
      // Members can read matches in a shared space. Editors can also create/update.
      allow read: if isMemberOf(ownerId, resource.data.spaceId);
      allow write: if getRoleIn(ownerId, request.resource.data.spaceId) == 'editor';
    }

    match /users/{ownerId}/tournaments/{tournamentId} {
      // Owner has full access.
      allow read, write: if isOwner(ownerId);
      
      // Members can read tournaments in a shared space. Editors can also create/update.
      allow read: if isMemberOf(ownerId, resource.data.spaceId);
      allow write: if getRoleIn(ownerId, request.resource.data.spaceId) == 'editor';
    }

    // Rules for global-like collections (players, games) that are used in spaces.
    // We allow any logged-in user to read them, as the UI handles filtering based on context.
    // The data (player/game names) is not considered highly sensitive.
    match /users/{ownerId}/players/{playerId} {
      // Owner has full write access.
      allow write: if isOwner(ownerId);
      // Any logged-in user can read any player profile.
      allow read: if isLoggedIn();
    }
    
    match /users/{ownerId}/games/{gameId} {
      // Owner has full write access.
      allow write: if isOwner(ownerId);
      // Any logged-in user can read any game profile.
      allow read: if isLoggedIn();
    }
    
    // =======================================
    // Public Shares
    // =======================================
    match /public_shares/{shareId} {
      // Anyone can read a public share document.
      allow get: if true;
      // No one can list all shares or write to them from the client.
      allow list, write: if false;
    }
  }
}
