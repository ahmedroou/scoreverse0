rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rule for the /users collection itself
    match /users/{userId} {
      // Any authenticated user can read their own user document.
      // An admin can read any user's document.
      allow get: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      
      // An admin can list all users. This is for the "Manage Users" page.
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // Users can create their own document on signup.
      allow create: if request.auth.uid == userId;

      // Users can update their own document, but cannot make themselves an admin.
      // Admins can update any user document (e.g., to make another user an admin).
      allow update: if request.auth != null && (request.auth.uid == userId && request.resource.data.isAdmin == resource.data.isAdmin || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
      
      // Only admins can delete users. Users cannot delete themselves through this rule.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rule for all subcollections within a user's document (players, games, etc.)
    match /users/{userId}/{document=**} {
      // A user can read and write to their own subcollections.
      // An admin can also read/write to any user's subcollections.
      allow read, write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }

    // Public shares can be read by anyone.
    match /public_shares/{shareId} {
      allow get: if true;
    }
  }
}
