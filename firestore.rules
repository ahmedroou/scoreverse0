rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAdmin() {
      // Check if the requesting user has the 'isAdmin' flag set to true in their user document.
      // Use exists() to prevent errors if the user document is not yet created.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isSpaceOwner(spaceId) {
      // Check if the requesting user has a space with the given ID in their own subcollection.
      // This is a reliable way to verify ownership before granting cross-user write access.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)/spaces/$(spaceId));
    }

    function getSpaceDataFromLink(userWithLink, spaceId) {
      // Get the space data from the link document.
      return get(/databases/$(database)/documents/users/$(userWithLink)/spaces/$(spaceId)).data;
    }

    function getMemberRole(ownerId, spaceId, userId) {
      // Get the role of a user from the original space document under the owner's account.
      return get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members[userId];
    }

    // USER COLLECTION RULES
    match /users/{userId} {
      // An admin can get any user profile. A user can get their own.
      allow get: if request.auth.uid == userId || isAdmin();
      // An admin can list all users for the user management page.
      allow list: if isAdmin();
      // A user can update their own profile.
      allow update: if request.auth.uid == userId;
      // User creation is handled by Firebase Auth, not direct client calls.
      allow create, delete: if false;

      // RULES FOR USER SUBCOLLECTIONS
      match /{collection}/{docId} {
        // By default, a user has full control over their own data subcollections.
        allow read, write: if request.auth.uid == userId;

        // --- Rules for Shared Space Data Access ---
        // Allow a member to READ data (games, players, matches) from a space they belong to.
        allow read: if getMemberRole(userId, resource.data.spaceId, request.auth.uid) != null;
        
        // Allow an 'editor' or 'owner' to WRITE data to a space they belong to.
        allow write: if getMemberRole(userId, request.resource.data.spaceId, request.auth.uid) in ['owner', 'editor'];
      }

      // RULES FOR THE 'spaces' SUBCOLLECTION
      // This collection contains both original space documents and "link" documents for members.
      match /spaces/{spaceId} {
        // Any authenticated user can READ any space document (original or link).
        // This is secure because sensitive data is not in the space doc itself.
        // The app logic uses the 'ownerId' from this doc to fetch the actual data.
        allow read: if request.auth != null;

        // WRITE rules are more strict.
        // An owner of a space can write (create/update/delete) link documents for that space
        // in any OTHER user's profile. `isSpaceOwner` confirms their ownership.
        allow write: if isSpaceOwner(spaceId);

        // A user can delete their own "link" document to leave a space.
        allow delete: if resource.data.isShared == true && request.auth.uid == userId;
      }
    }

    // Public shares are read-only for everyone.
    match /public_shares/{shareId} {
      allow read: if true;
      allow write: if false;
    }
  }
}
