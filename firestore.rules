rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check the 'isAdmin' flag on the requesting user's own document.
      // This is secure as users cannot change their own admin status.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isMemberOf(spaceId, ownerId) {
      // Checks if the requesting user's UID is in the members map of a specific space.
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)) &&
             request.auth.uid in get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members;
    }
    
    function getRoleIn(spaceId, ownerId) {
      // Returns the role ('owner', 'editor', 'viewer') of the requesting user for a specific space.
       return get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members[request.auth.uid];
    }

    // =================================
    // User Profile Rules (/users/{userId})
    // =================================
    match /users/{userId} {
      // Admins can list and get any user profile, which is required for the "Manage Users" page.
      allow list, get: if isAdmin();
      
      // A user can always get their own profile.
      allow get: if isOwner(userId);
      
      // A user can create their own profile upon signup, but not as an admin.
      allow create: if isOwner(userId) && request.resource.data.isAdmin == false;
      
      // A user can update their own profile, but cannot change their own 'isAdmin' status.
      allow update: if isOwner(userId) && request.resource.data.isAdmin == resource.data.isAdmin;

      // Admins can delete any user account except their own.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // =================================
    // Space Management Rules (/users/{ownerId}/spaces/{spaceId})
    // =================================
    match /users/{ownerId}/spaces/{spaceId} {
      // The owner of the space has full control (read, write, delete).
      allow read, write, delete: if isOwner(ownerId);

      // A member of a space can read the space document they have been invited to.
      allow get: if isMemberOf(spaceId, ownerId);
    }

    // =================================
    // Core Data Rules (matches, players, games, tournaments)
    // =================================
    match /users/{ownerId}/{collection}/{docId} 
      where collection in ['players', 'games', 'matches', 'tournaments'] {
      
      // Data with no spaceId is considered global and is only accessible by its owner.
      // Data with a spaceId is accessible by its owner OR any member of that space.
      allow read: if isOwner(ownerId) || (resource.data.spaceId != null && isMemberOf(resource.data.spaceId, ownerId));
      
      // Write access is granted to the owner OR to members who are 'editors' or 'owners' of the space.
      allow write: if isOwner(ownerId) || (request.resource.data.spaceId != null && isMemberOf(request.resource.data.spaceId, ownerId) && getRoleIn(request.resource.data.spaceId, ownerId) in ['owner', 'editor']);
    }

    // =================================
    // Public Sharing Rules
    // =================================
    match /public_shares/{shareId} {
      // Public share links are read-only for everyone.
      allow read: if true;
      allow write: if false;
    }
  }
}
