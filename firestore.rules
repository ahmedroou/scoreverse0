
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isJoining(ownerId) {
      // Is trying to update a space owned by someone else
      return isSignedIn() && request.auth.uid != ownerId;
    }

    // Allow users to manage their own data
    match /users/{userId}/{document=**} {
      allow read, write: if isOwner(userId);
    }

    // Allow an invited user to read the space invite code to verify it
    match /spaceInvites/{inviteCode} {
        allow get: if isSignedIn();
    }
    
    // --- Rules for Cross-User Access ---
    
    // Allow a user to join OR leave a space they don't own
    match /users/{ownerId}/spaces/{spaceId} {
      allow update: if isJoining(ownerId) &&
                       // Only the 'members' field can be changed.
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       // The user can only modify their own entry in the members map.
                       request.resource.data.members.diff(resource.data.members).affectedKeys().hasOnly([request.auth.uid]) &&
                       (
                         // EITHER they are joining as a viewer for the first time
                         (
                           (resource.data.members == null || !(request.auth.uid in resource.data.members)) &&
                           request.resource.data.members[request.auth.uid] == 'viewer'
                         ) ||
                         // OR they are leaving (their key is removed and size decreases by 1)
                         (
                           request.auth.uid in resource.data.members &&
                           (resource.data.members.size() - 1) == request.resource.data.members.size()
                         )
                       );
    }
    
    // Allow a member of a space to READ the data of that space's owner
    match /users/{ownerId}/{collection}/{docId} {
      allow get, list: if isSignedIn() &&
                          // The user making the request has joined one of the owner's spaces
                          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.joinedSpaces[ownerId] != null;
    }
    
    // Allow public read access to shared data links
    match /public_shares/{shareId} {
      allow get: if true;
    }
  }
}
