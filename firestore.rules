rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- User Profile and Collection Listing Rules ---
    match /users/{userId} {
      // Admins can list all users.
      allow list: if isAdmin();
      // Users can read/write their own profile. Admins can read any profile.
      allow read, write: if isSignedIn() && request.auth.uid == userId;
      allow read: if isAdmin();
    }

    // --- User Sub-collection Access Rules ---
    match /users/{ownerId}/{collection}/{docId} {
        // The owner of the data has full read/write access.
        allow read, write: if isSignedIn() && request.auth.uid == ownerId;

        // Allow a user who has joined a space to READ the data of the space's owner.
        // This checks the current user's own document to see if they have a 'joinedSpaces' entry for the owner.
        allow read: if isSignedIn() &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.joinedSpaces[ownerId] != null;
    }

    // --- Specific Rule for JOINING a Space ---
    match /users/{ownerId}/spaces/{spaceId} {
        // This rule allows a user to update a space document ONLY to add themselves as a member.
        allow update: if isSignedIn() &&
                         // The user trying to join must not be the owner.
                         request.auth.uid != ownerId &&
                         // This is a security check: only the 'members' field can be changed.
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                         // A deeper check: inside 'members', only the user's own ID can be added/changed.
                         request.resource.data.members.diff(resource.data.members).affectedKeys().hasOnly([request.auth.uid]) &&
                         // The user can only add themselves with the 'viewer' role. No self-promoting to editor/owner.
                         request.resource.data.members[request.auth.uid] == 'viewer';
    }

    // --- Invite Code Rules ---
    match /spaceInvites/{inviteCode} {
      // Any signed-in user can read an invite code to verify it.
      allow read: if isSignedIn();
      // Only the space owner can create/delete the invite code.
      // This is handled by a batch write in the app, so we check the incoming data.
      allow write: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
    }

    // --- Public Share Page Rules ---
    match /public_shares/{shareId} {
      allow read: if true;
      allow write: if false; // Nobody can write directly to public shares
    }
  }
}
