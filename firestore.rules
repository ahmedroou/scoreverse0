
rules_version = '2';

// Helper function to check if the requesting user is an admin.
function isAdmin() {
  // Ensure the user is authenticated before trying to access their data.
  return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
}

service cloud.firestore {
  match /databases/{database}/documents {

    // Public shares are readable by anyone, but not writable.
    match /public_shares/{shareId} {
      allow read: if true;
      allow write: if false; 
    }

    // Rules for the main user documents collection
    match /users/{userId} {
      // An admin can list all users.
      allow list: if isAdmin();
      
      // A user can get their own document, AND an admin can get any user's document.
      // This is the key fix: an admin needs 'get' permission on all documents they 'list'.
      allow get: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // A user can create/update their own document. An admin can also update any user document.
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Only an admin can delete another user. They cannot delete themselves.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // Rules for all subcollections within a user's document (players, games, etc.)
    match /users/{userId}/{subcollection}/{docId} {
      // Only the owner of the user document can read, write, or delete documents in their own subcollections.
      // This keeps user data private and prevents even admins from directly modifying it.
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}
