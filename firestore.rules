
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Default deny all reads/writes unless explicitly allowed
    match /{path=**} {
      allow read, write: if false;
    }

    // Users can read/write their own documents
    match /users/{userId}/{document=**} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    // An owner can read their own space invites
    match /spaceInvites/{inviteCode} {
        allow read: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Any signed-in user can get an invite code to check it
    match /spaceInvites/{inviteCode} {
        allow get: if isSignedIn();
    }

    // Allow members to read the data of a space they've joined
    match /users/{ownerId}/{collection}/{docId} {
      allow read: if isSignedIn() &&
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.joinedSpaces[ownerId] != null;
    }

    // Allow a user to JOIN or LEAVE a space
    match /users/{ownerId}/spaces/{spaceId} {
        allow update: if isSignedIn() &&
                         !isOwner(ownerId) &&
                         // only the members field is being changed
                         request.writeFields.size() == 1 &&
                         'members' in request.writeFields &&
                         // The change must be either joining or leaving
                         (
                           // Condition for JOINING: adding self as 'viewer'
                           (
                             request.resource.data.members.size() == resource.data.members.size() + 1 &&
                             request.resource.data.members[request.auth.uid] == 'viewer' &&
                             !(request.auth.uid in resource.data.members)
                           ) ||
                           // Condition for LEAVING: removing self from members map
                           (
                             request.resource.data.members.size() == resource.data.members.size() - 1 &&
                             !(request.auth.uid in request.resource.data.members) &&
                             (request.auth.uid in resource.data.members)
                           )
                         );
    }
  }
}
