rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if the user is the owner of the document path
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for the top-level user documents
    match /users/{userId} {
      // An admin can read any user document. A user can read their own.
      allow get: if isOwner(userId) || isAdmin();
      
      // Only an admin can list all users. This is the key fix.
      allow list: if isAdmin();
      
      // A user can create their own document on signup.
      allow create: if isOwner(userId);
      
      // A user can update their own document.
      allow update: if isOwner(userId);
      
      // Only an admin can delete a user.
      allow delete: if isAdmin();
    }

    // Rules for a user's spaces subcollection
    match /users/{ownerId}/spaces/{spaceId} {
      // The owner of the space can read/write their own space definitions.
      // This allows them to create spaces and update the members list.
      allow read, write: if isOwner(ownerId);
      
      // A member can read the space document if they have a corresponding link document.
      allow get: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)/spaces/$(spaceId));
      
      // An invited user can create a "link" document in their own spaces subcollection.
      allow create: if isOwner(ownerId) && request.resource.data.isShared == true;
    }
    
    // Generic rules for other data subcollections (players, games, matches, tournaments)
    match /users/{ownerId}/{collection:(players|games|matches|tournaments)}/{docId} {
      // The owner always has full access to their own data.
      allow read, write: if isOwner(ownerId);

      // Members of a space can read data within that space.
      allow read: if request.auth != null &&
                  resource.data.spaceId != null &&
                  get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(resource.data.spaceId)).data.members[request.auth.uid] != null;
                  
      // Editors of a space can write data within that space.
      allow write: if request.auth != null &&
                   resource.data.spaceId != null &&
                   get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(resource.data.spaceId)).data.members[request.auth.uid] == 'editor';
    }

    // Rules for public sharing
    match /public_shares/{shareId} {
      allow read: if true;
      allow write: if false; // Can only be written to by the owner via app logic
    }
  }
}
