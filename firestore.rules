
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all.
    match /{document=**} {
      allow read, write: if false;
    }

    // Public shares are read-only for everyone.
    match /public_shares/{shareId} {
      allow read: if true;
    }
    
    // User profile documents.
    match /users/{userId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
      
      allow get: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow list: if request.auth != null && isAdmin();
      // Allow user to create their own doc on signup.
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth != null && isAdmin();
    }

    // Space documents (both original and shared "links").
    match /users/{targetUserId}/spaces/{spaceId} {
      // Allow read access if the requesting user is in the members list.
      allow get: if request.auth.uid in resource.data.members;

      // Allow creation if the creator is the owner specified in the new document's data.
      // This covers both creating an original space and a link for an invitee.
      allow create: if request.resource.data.ownerId == request.auth.uid;

      // Allow updates only by the space owner.
      // This applies to the original doc and all link docs.
      allow update: if resource.data.ownerId == request.auth.uid;
      
      // Allow delete by the space owner (removing anyone) OR by the member leaving the space.
      allow delete: if resource.data.ownerId == request.auth.uid || request.auth.uid == targetUserId;
    }

    // Documents inside a space (games, players, matches, etc.).
    // This rule assumes these docs are only under the owner's user account.
    match /users/{ownerId}/{collection}/{docId} {
        
        function getSpaceData(spaceId) {
            // The canonical space document is always under the owner's account.
            return get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data;
        }

        function isMember(docData) {
            // For global (non-space) documents, only the owner is a "member".
            if (!('spaceId' in docData) || docData.spaceId == null) {
                return request.auth.uid == ownerId;
            }
            let members = getSpaceData(docData.spaceId).members;
            return request.auth.uid in members;
        }

        function canEdit(docData) {
            if (!('spaceId' in docData) || docData.spaceId == null) {
                return request.auth.uid == ownerId;
            }
            let members = getSpaceData(docData.spaceId).members;
            let role = members[request.auth.uid];
            return role == 'owner' || role == 'editor';
        }
        
        // Use request.resource.data for create/update, and resource.data for get/delete.
        allow read: if isMember(resource.data);
        allow create: if canEdit(request.resource.data);
        allow update, delete: if canEdit(resource.data);
    }
  }
}
