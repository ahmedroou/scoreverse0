rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the current user is an admin.
    // It safely checks for document existence before accessing data.
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid))
              && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if a user is a member of a space
    function isMember(ownerId, spaceId) {
      return exists(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId))
             && request.auth.uid in get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members;
    }
    
    // Helper function to check if a user is an editor or owner of a space
    function isEditor(ownerId, spaceId) {
      let role = get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members[request.auth.uid];
      return isMember(ownerId, spaceId) && (role == 'owner' || role == 'editor');
    }

    // --- User Profile Rules ---
    match /users/{userId} {
      // Admins can list and read all user profiles.
      // Users can read their own profile.
      allow get, list: if request.auth.uid == userId || isAdmin();

      // Users can create their own profile (but not as admin).
      allow create: if request.auth.uid == userId && request.resource.data.isAdmin == false;

      // Users can update their own profile (but not change admin status).
      allow update: if request.auth.uid == userId && request.resource.data.isAdmin == resource.data.isAdmin;
      
      // Admins can delete users.
      allow delete: if isAdmin();
    }

    // --- Space Document Rules ---
    match /users/{ownerId}/spaces/{spaceId} {
      // The owner has full access to their own space document.
      allow read, write: if request.auth.uid == ownerId;
      // Any member of the space can read the space document.
      allow get: if isMember(ownerId, spaceId);
      // Let space owner create 'link' docs for members
      allow create: if request.auth.uid == request.resource.data.ownerId;
    }

    // --- Space Content Rules (matches, tournaments) ---
    match /users/{ownerId}/{collection}/{docId} where collection in ['matches', 'tournaments'] {
      // The owner has full access.
      allow read, write: if request.auth.uid == ownerId;
      
      // Members can read data in spaces they belong to.
      allow read: if request.resource.data.spaceId != null && isMember(ownerId, request.resource.data.spaceId);

      // Editors and owners can write data.
      allow write: if request.resource.data.spaceId != null && isEditor(ownerId, request.resource.data.spaceId);
    }
    
    // --- Global Content Rules (players, games) ---
    // These are global to the owner's account. When a space is shared, these are shared too.
    match /users/{ownerId}/{collection}/{docId} where collection in ['players', 'games'] {
       // The owner has full access.
      allow read, write: if request.auth.uid == ownerId;
      // Any authenticated user can read players and games. This is necessary for the
      // member-of-space feature to work with the current data model.
      allow read: if request.auth != null;
    }
    
    // --- Public Share Link Rules ---
    match /public_shares/{shareId} {
      allow read: if true;
      allow write: if false; // Only backend functions should write here
    }
  }
}
