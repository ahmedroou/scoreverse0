
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check the `isAdmin` flag on the requesting user's own document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isMemberOfAnySpaceFrom(ownerId) {
      // Check if the requesting user has joined ANY space from the given owner.
      // The sharedSpaces map is { spaceId: ownerId }. We check if our target ownerId exists in the values.
      return ownerId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.sharedSpaces.values();
    }
    
    function isEditorOfSpace(ownerId, spaceId) {
        // Get the space document and check the members map for the requesting user's role.
        return get(/databases/$(database)/documents/users/$(ownerId)/spaces/$(spaceId)).data.members[request.auth.uid] == 'editor';
    }


    // --- User Profiles ---
    match /users/{userId} {
      // READ: Admins can read any profile. Users can read their own.
      allow read: if isAdmin() || isOwner(userId);

      // CREATE: A user can only create their own profile document upon signup.
      allow create: if isOwner(userId);

      // UPDATE: A user can update their own username or their map of shared spaces.
      // This is secure because other rules control *how* they can be added to a space.
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'sharedSpaces']);

      // DELETE: Only admins can delete users, and they cannot delete themselves.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // --- Invite Codes ---
    match /spaceInvites/{inviteCode} {
      // READ: Any authenticated user can read an invite code to find the space details.
      allow read: if request.auth != null;

      // WRITE: Only the owner of the space can create or delete an invite code.
      // This is checked by verifying the ownerId in the invite data against the request auth.
      allow write: if request.auth != null && isOwner(request.resource.data.ownerId);
    }
    
    // --- Public Share Links ---
    match /public_shares/{shareId} {
        // READ: Anyone can read public share data, no authentication needed.
        allow read: if true;
        // WRITE: Only the owner of the data can create or update it.
        allow write: if isOwner(shareId);
    }

    // --- Specific Rule for SPACES Subcollection ---
    match /users/{ownerId}/spaces/{spaceId} {
        // READ: The owner, an admin, or any member of any of the owner's spaces can read the space info.
        allow read: if isOwner(ownerId) || isAdmin() || isMemberOfAnySpaceFrom(ownerId);
        
        // UPDATE:
        // - The owner or an admin can update anything.
        // - An authenticated user can add themselves to the members map as a 'viewer' when joining.
        function isJoiningAsViewer() {
          let membersBefore = resource.data.members;
          let membersAfter = request.resource.data.members;
          let changedKeys = membersAfter.keys().removeAll(membersBefore.keys());
          // Ensure only the requesting user was added, and their role is 'viewer'.
          return changedKeys.size() == 1 &&
                 changedKeys[0] == request.auth.uid &&
                 membersAfter[request.auth.uid] == 'viewer';
        }
        
        allow update: if isAdmin() || isOwner(ownerId) || isJoiningAsViewer();
        
        // CREATE, DELETE: Only the owner and admins can create or delete spaces.
        allow create, delete: if isOwner(ownerId) || isAdmin();
    }
    
    // --- General Rule for other User-Owned Data (Games, Players, Matches, Tournaments) ---
    match /users/{ownerId}/{collection}/{docId} {
      // This rule applies to all user subcollections EXCEPT 'spaces', which is handled above.
      
      // READ:
      //  - The owner of the data.
      //  - An admin.
      //  - A user who is a member of ANY space owned by this owner.
      allow read: if isOwner(ownerId) || isAdmin() || isMemberOfAnySpaceFrom(ownerId);

      // WRITE (CREATE, UPDATE, DELETE):
      //  - The owner of the data.
      //  - An admin.
      //  - An editor of a space can write to matches/tournaments within that specific space.
      allow write: if isOwner(ownerId) || isAdmin()
                   || ((collection == 'matches' || collection == 'tournaments')
                        && resource.data.spaceId != null 
                        && isEditorOfSpace(ownerId, resource.data.spaceId));
    }
  }
}
